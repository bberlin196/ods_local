<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/15/2015 10:18:11 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="WIN-RU2NSSLL7HS"
  DTS:CreatorName="WIN-RU2NSSLL7HS\Administrator"
  DTS:DTSID="{F7C257FE-252D-4A54-8276-FF4F1FE9DDE0}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="12.0.2430.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="SalesOrders"
  DTS:PackageType="5"
  DTS:VersionBuild="80"
  DTS:VersionGUID="{D5AAFC82-B275-4FCA-997F-B1135CF4AE9A}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[AllocationDetails.txt.zip]"
      DTS:CreationName="FILE"
      DTS:DTSID="{0456E94D-60EB-4B6A-B39D-DE324C2A551D}"
      DTS:ObjectName="AllocationDetails.txt.zip">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="C:\HDFS_Stage\data\AllocationDetails.txt.zip" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SSH MT FTP Server]"
      DTS:CreationName="SSH"
      DTS:DTSID="{110022CC-7103-4E3D-8539-D0A6EF5B0A88}"
      DTS:ObjectName="SSH MT FTP Server">
      <DTS:ObjectData>
        <ConnectionManager
          BackendVersion="2"
          ConnectionString="ServerHost=bisftp01.lax01.mtsvc.net;ServerPort=22;ServerUser=gdbisftp;ServerKeyFile=C:\keys\bi_private.ppk;ServerTimeout=60;LogFile=;TransferBinary=True;ServerType=Unknown;ServerFingerprint=;RetainSameConnection=False;ProxyType=None;ProxyHost=;ProxyPort=80;ProxyUser=;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EF91485F-E04C-4E0D-B7CC-7243E98CC5C3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varDbConnection">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task - Sales Orders"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{1A8EE99A-C1DD-472C-9C1E-B55D7166AFC3}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task - Sales Orders"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_2e79ef5ec40c40659c4b5fed897ff42b"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="MT_SalesOrders.sql"
            Encoding="UTF8"><![CDATA[select
	top 10
	/*ds not null*/
	orderid,  
	/* nullable  ????  what to do?  */
	startdate,  
	/*ds not null*/
	account,  
	/*ds not null*/
	country,  
	/*ds not null*/
	ordertypeid, 
	/*ds not null*/
	tax, 
	/*ds not null*/
	total 
from [dbo].[vAllocationDetail]
	where ordertypeid in (1,2,3) and orderid > 0]]></ProjectItem>
          <ProjectItem
            Name="ST_2e79ef5ec40c40659c4b5fed897ff42b.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{3133ACB6-C005-429A-82E9-18F68B560CCE}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_2e79ef5ec40c40659c4b5fed897ff42b</RootNamespace>
    <AssemblyName>ST_2e79ef5ec40c40659c4b5fed897ff42b</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Extensions" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <Content Include="MasterPresentationCompletion.sql" />
    <Content Include="MT_SalesOrders.sql" />
    <Content Include="WarningMail.sql" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Threading;
using System.Collections.Generic;
using System.Diagnostics;
using System.Data.SqlClient;
using System.Globalization;

#endregion

namespace ST_2e79ef5ec40c40659c4b5fed897ff42b
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */
        public string varDbConnection { get; set; }
        public string varDataDirectory { get; set; }
        public int varDaysBack { get; set; }
        public string varSalesOrderJsonFile { get; set; }
        public DateTime varEndDate { get; set; }
        public int varMaxIterNumber { get; set; }
        public int varSleepTimeMin { get; set; }
        public int varModuleToCall { get; set; }

        public DataTable dtMtSalesOrders = new DataTable("mtSalesOrders");

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
			// TODO: Add your code here
            ConnectionManager cm;
            string pwd = @"a\7B'fTRXQ~re/y";
            bool isFailed = true;

            try
            {
                // get the SSIS Remote connection object
                cm = Dts.Connections[varDbConnection]; //"bi01.lax01.mtsvc.net.HostOps.biadmin"];

                
                string connstr = cm.ConnectionString + ";pwd=" + pwd;
                System.Data.OleDb.OleDbConnection objRmConn = new System.Data.OleDb.OleDbConnection(connstr);
                using (objRmConn)
                {

                    objRmConn.Open();

                    // Test connection
                    OleDbCommand cmd = new OleDbCommand("SELECT 1", objRmConn);
                    int val = (int)cmd.ExecuteScalar();

                    // Is Master Presentaion will be checked prior  to this component
                    FetchSalesOrdersData(objRmConn);

                } // using (objRmConn)
            }
            catch (Exception ex)
            {
                string logPath = String.Format("{0}{1}.log",@"C:\HDFS_Stage\log\",Dts.Variables["System::PackageName"].Value);
                FileStream fl = File.Open(logPath, FileMode.Append, FileAccess.Write, FileShare.ReadWrite);

                using (System.IO.StreamWriter file = new System.IO.StreamWriter(fl))
                {
                    file.WriteLine(String.Format("Exception: [{0}],[{1}]",DateTime.Now.ToString(), ex.Message));
                }

            }

            Dts.TaskResult = isFailed ? (int)ScriptResults.Failure : (int)ScriptResults.Success;
			
		}

        private void FetchSalesOrdersData(OleDbConnection objRmConn)
        {
            // set sql dir path
            string sql_dir_path = @"C:\temp\";
            bool isFailed = true;


            string mtSalesOrdersSql = sql_dir_path + "MT_SalesOrders.sql";
            string sql = File.ReadAllText(mtSalesOrdersSql);
            System.Data.OleDb.OleDbCommand sqlComm = new System.Data.OleDb.OleDbCommand(sql, objRmConn);

            using (OleDbDataReader reader = sqlComm.ExecuteReader())
            {
                dtMtSalesOrders.Clear();
                dtMtSalesOrders.Load(reader);
                if (dtMtSalesOrders.Rows.Count == 0)
                { 
                    // Log now rows
                    return; // nothing to do
                }

                #region Get Orders
                                
                SalesOrders salesOrders = new SalesOrders();
                               
                
                foreach (DataRow dr in dtMtSalesOrders.Rows)
                {
                    SalesOrder so = new SalesOrder();

                    if (dr.IsNull("orderid"))
                        throw new InvalidDataException("orderid");
                    so.OrderId = dr["orderid"].ToString();
                    
                    if (dr.IsNull("startdate"))
                        throw new InvalidDataException("startdate");
                    so.OrderUTCDateTime = this.DateTimeFormat(Convert.ToDateTime(dr["startdate"]));
                    
                    if (dr.IsNull("CustomerId"))
                        throw new InvalidDataException("CustomerId");
                    so.CustomerId = "CustomerId";    // TBD

                    if(dr.IsNull("country"))
                        throw new InvalidDataException("country");
                    so.TransactionalISOCurrencyCode = Country2CurrencyISOCode(dr["country"].ToString());

                    if (dr.IsNull("OriginalOrderIdValue"))
                        so.OriginalOrderIdValue = "-1";
                    else
                        so.OriginalOrderIdValue = "22222";  // 

                    if (dr.IsNull("ordertypeid"))
                        throw new InvalidDataException("ordertypeid");
                    so.OrderType = MT2GD_OrderType(dr["ordertypeid"].ToString());

                    
                    //if (dr.IsNull("ShippingHandlingAmount"))  TBD
                    //    throw new InvalidDataException("ShippingHandlingAmount");
                    so.ShippingHandlingAmount = this.AmountFormat(Convert.ToDouble(dr["total"]));

                    //if (dr.IsNull("TotalTaxAmount")) TBD
                    //    throw new InvalidDataException("TotalTaxAmount");
                    so.TotalTaxAmount = this.AmountFormat(Convert.ToDouble(dr["tax"]));  


                    //if (dr.IsNull("SubTotalAmount")) TBD
                    //    throw new InvalidDataException("SubTotalAmount");
                    so.SubTotalAmount = this.AmountFormat(Convert.ToDouble(dr["total"]));

                    //if (dr.IsNull("TotalAmount")) TBD
                    //    throw new InvalidDataException("SubTotalAmount");
                    so.TotalAmount = this.AmountFormat(Convert.ToDouble(dr["total"]));

                    salesOrders.Add(so);


                } // foreach (DataRow dr in dtMtSalesOrders.Rows)



                #endregion //Get Orders
            }
            


            throw new NotImplementedException();
        }

        

        void Wait4MasterPresentaion(System.Data.OleDb.OleDbConnection objRmConn)
        {
            // set sql dir path
            string sql_dir_path = @"C:\temp\";
            bool isFailed = true;

            
            string mtSalesOrdersSql = sql_dir_path + "MT_SalesOrders.sql";
            string sql = File.ReadAllText(mtSalesOrdersSql);
            System.Data.OleDb.OleDbCommand sqlComm = new System.Data.OleDb.OleDbCommand(sql, objRmConn);
            bool sentWarning = false;

            // get the SSIS Remote connection object
            ConnectionManager cm = Dts.Connections["localhost.HostOps"];
            //string connstr = cm.ConnectionString + ";pwd=" + pwd;
            System.Data.OleDb.OleDbConnection objLocalConn = new System.Data.OleDb.OleDbConnection(cm.ConnectionString);

            using (objLocalConn)
            {
                objLocalConn.Open();
                // test objLocalConn  connection
                OleDbCommand cmdLoc = new OleDbCommand("SELECT 1", objRmConn);
                int val = (int)cmdLoc.ExecuteScalar();


                while (sqlComm.ExecuteReader().HasRows)
                {
                    // Should we issue an error?
                    if (DateTime.Now.Hour > 20)
                    {
                        string WarningMailSql = sql_dir_path + "MasterPresentationErrorMail.sql";
                        string sqlWarningMail = File.ReadAllText(WarningMailSql);
                        System.Data.OleDb.OleDbCommand sqlWarningMailCom = new System.Data.OleDb.OleDbCommand(sqlWarningMail, objLocalConn);
                        int num_of_rows = sqlWarningMailCom.ExecuteNonQuery();
                        break;
                    }

                    // Should we issue a warning?
                    if (!sentWarning && DateTime.Now.Hour > 9)
                    {

                        // send warning
                        sentWarning = true;

                        string WarningMailSql = sql_dir_path + "MasterPresentationWarningMail.sql";
                        string sqlWarningMail = File.ReadAllText(WarningMailSql);
                        System.Data.OleDb.OleDbCommand sqlWarningMailCom = new System.Data.OleDb.OleDbCommand(sqlWarningMail, objLocalConn);
                        int num_of_rows = sqlWarningMailCom.ExecuteNonQuery();


                    }

                    Thread.Sleep(1);  // 5000 * 60  = 5 min

                } // while((number_of_rows = sqlComm.ExecuteNonQuery()) == 0)

                isFailed = false;

            }  // using (objLocalConn)
        
        }

        private void Init()
        {
            try
            {

                varDbConnection = String.Format(@"{0}", Dts.Variables["varDbConnection"].Value);
                varDataDirectory = String.Format(@"{0}", Dts.Variables["varDataDirectory"].Value);
                varDaysBack = Convert.ToInt32(String.Format(@"{0}", Dts.Variables["varDaysBack"].Value));
                varSalesOrderJsonFile = String.Format(@"{0}", Dts.Variables["varFeedbackJsonFile"].Value);
                varEndDate = (DateTime)Dts.Variables["varEndDate"].Value;
                varMaxIterNumber = Convert.ToInt32(String.Format(@"{0}", Dts.Variables["varMaxIterNumber"].Value));
                varSleepTimeMin = Convert.ToInt32(String.Format(@"{0}", Dts.Variables["varSleepTimeMin"].Value));
                varModuleToCall = Convert.ToInt32(String.Format(@"{0}", Dts.Variables["varModuleToCall"].Value));
                                


            }
            catch (Exception ex)
            {

                ScriptMain.LogMessage(String.Format("{0}`DW_Promoter::Init`[{1}]", DateTime.Now.ToString(), ex.Message));
                throw ex;
            }
        }

        
        #region Static class members
        static bool IsFileReady(String sFilename)
        {
            // If the file can be opened for exclusive access it means that the file
            // is no longer locked by another process.
            try
            {
                if (!System.IO.File.Exists(sFilename)) return true;

                using (System.IO.FileStream inputStream = File.Open(sFilename, FileMode.Open, FileAccess.Write, FileShare.Write))
                {
                    if (inputStream.Length > 0)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }

                }
            }
            catch (Exception e)
            {
                Console.WriteLine("IsFileReady:{0}", e.Message);
                return false;
            }
        }
        
        static void LogMessage(string message)
        {


            string logFile = @"C:\HDFS_Stage\log\ESOM_DataProc.log";
            string log = logFile;

            // just wait
            if (!IsFileReady(logFile)) System.Threading.Thread.Sleep(5000);

            // ok tried diferent file
            if (!IsFileReady(logFile)) log = logFile + DateTime.Now.Ticks.ToString();

            FileStream fl = File.Open(log, FileMode.Append, FileAccess.Write, FileShare.ReadWrite);

            using (System.IO.StreamWriter file = new System.IO.StreamWriter(fl))
            {
                file.WriteLine(message);
            }

        }

        #endregion Static class members

        #region JSON Schema convertion functions
        /// <summary>
        /// Schema:
        /// "type": "number",
        /// "multiplesOf": 0.000001,
        /// Sample:  12.170000
        /// </summary>
        /// <param name="number"></param>
        /// <returns> formatted string </returns>
        private string AmountFormat(double number)
        {
            return number.ToString("0.000000");
        }

        /// <summary>
        /// "type": "number",
        /// "multiplesOf": 0.01,
        /// 
        /// </summary>
        /// <param name="number"></param>
        /// <returns> formatted string </returns>
        private string RegistrationPeriodFormat(double number)
        {
            throw new NotImplementedException("RegistrationPeriodFormat");
            return number.ToString("0.00");
        }


        /// <summary>
        /// the date will be in a standard json utc format:  “2012-04-23T18:25:43.511Z”  ,
        /// if there is no time then we should have the order as PST to UTC 12AM 
        /// which is summer time "2018-01-25T07:00:00Z"  , winter time "2018-01-25T08:00:00Z"
        /// </summary>
        /// <param name="dateTime"></param>
        /// <returns> formatted string </returns>
        private string DateTimeFormat(DateTime dateTime)
        { 
            // Convert the current PST to UTC
            DateTime parsedDate = DateTime.Parse("2018-01-25");
            var timeUtc = DateTime.UtcNow;
            TimeZoneInfo easternZone = TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time");
            DateTime utcDateTime = TimeZoneInfo.ConvertTimeFromUtc(parsedDate, easternZone);
            Debug.Write(utcDateTime);
            // 2018-01-25T04:00:00Z
            string formattedDate = String.Format("{0}Z", utcDateTime.ToString("yyyy-MM-dd HH:mm:ss").Replace(' ', 'T'));
            Debug.Write(formattedDate);
            return formattedDate;
        }

        private string MT2GD_OrderType(string mtOrderCode)
        {
            string gdOrderType = String.Empty;
            /*
             TBD - mapping
             */

            gdOrderType = mtOrderCode;

            return gdOrderType;
        
        }

        private string Country2CurrencyISOCode(string counrty)
        {
            RegionInfo myRI = new RegionInfo(counrty);
            return myRI.ISOCurrencySymbol;
        }

        #endregion // JSON Schema convertion functions

        

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="data"></param>
        private void SerializeDataToJSON(string data)
        {
            
        }

        


        

    }  //public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase

    #region JSON classes
        /// <summary>
        /// JSON Classes which are used for seralization of the fetching data to the JSON file
        /// </summary>
               

        public class BillingAddress
        {
            public string City { get; set; }
            public string State { get; set; }
            public string Country { get; set; }
            public string PostalCode { get; set; }
        }

        public class Payment
        {
            public double Amount { get; set; }
            public string MerchantAccountKey { get; set; }
            public BillingAddress BillingAddress { get; set; }
        }

        public class ResourceAmount
        {
            public double ICANNFee { get; set; }
            public double ListPrice { get; set; }
            public double Cost { get; set; }
            public double PricePaid { get; set; }
        }

        public class Product
        {
            public string ProductFamily { get; set; }
            public string ProductSubFamily { get; set; }
            public string RegistrationPeriodType { get; set; }
            public string RegistrationPeriod { get; set; }
            public string TLD { get; set; }
            public string Sponsor { get; set; }
            public string RegistrySponsor { get; set; }
            public string Supplier { get; set; }
            public string ProductTLDPhase { get; set; }
            public string RegistryDescription { get; set; }
            public string PriceTierDescription { get; set; }
            public string PriceTierName { get; set; }
            public string PremiumTierType { get; set; }
        }

        public class SalesOrderResource
        {
            public string OrderItemId { get; set; }
            public string OrderItemResourceId { get; set; }
            public int OrderItemQuantity { get; set; }
            public int OrderItemResourceCount { get; set; }
            public DateTime ServicePeriodStartDate { get; set; }
            public DateTime ServicePeriodEndDate { get; set; }
            public string DurationType { get; set; }
            public double Duration { get; set; }
            public double TaxTotal { get; set; }
            public string ISOCurrencyCode { get; set; }
            public ResourceAmount ResourceAmount { get; set; }
            public Product Product { get; set; }
        }

        

        public class SalesOrder
        {
            public string OrderId { get; set; }
            public string OrderUTCDateTime { get; set; }
            public string CustomerId { get; set; }
            public string TransactionalISOCurrencyCode { get; set; }
            public string OriginalOrderIdValue { get; set; }
            public string OrderType { get; set; }
            public string ShippingHandlingAmount { get; set; }
            public string TotalTaxAmount { get; set; }
            public string SubTotalAmount { get; set; }
            public string TotalAmount { get; set; }
            public List<Payment> Payments { get; set; }
            public List<SalesOrderResource> SalesOrderResources { get; set; }
        }
        

        public class SalesOrders
        {
            // Dictionary<string::SalesOrder::OrderId, SalesOrder>
            private Dictionary<string, SalesOrder> dictSalesOrder;

            public void Add(SalesOrder order)
            {
                dictSalesOrder[order.OrderId] = order;
            }
        }

        #endregion  // JSON classes
}]]></ProjectItem>
          <ProjectItem
            Name="WarningMail.sql"
            Encoding="UTF8"><![CDATA[DECLARE @Recipients varchar(256) = 'bberlin@mediatemple.net;';
DECLARE @wmessage NVARCHAR(2000);

set @wsubject = 'RM SSIS HDFS ETL [Warning] SSIS PROD Master Presentation ETL seems to be delayed';
set @wmessage = 'SSIS PROD Master Presentation ETL is delaying RM SSIS HDFS ETL node';


EXEC [msdb].dbo.sp_send_dbmail
				@profile_name = '(mt) SMTP Mail',
				@recipients = @Recipients,
				@body = @wmessage,
				@subject = @wsubject,
				@importance='High'
				 ;]]></ProjectItem>
          <ProjectItem
            Name="MasterPresentationCompletion.sql"
            Encoding="UTF8"><![CDATA[SELECT TOP 1
       [ID]
      ,[SOURCE]
      ,[SENDER]
      ,[TYPE]
      ,[STATUS]
      ,[DEPENDENCY]
      ,[MESSAGE]
      ,[SUBJECT]
      ,[EVENT_TIME]
      ,[REC_TIME_STAMP]
  FROM [HostOps].[dbo].[DwEtlLog]
  where 
  [SENDER] = 'googleAnalytics'
  and convert(date,[REC_TIME_STAMP]) = convert(date,GETDATE())
  and STATUS = 'I']]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_2e79ef5ec40c40659c4b5fed897ff42b</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_2e79ef5ec40c40659c4b5fed897ff42b</msb:DisplayName>
		<msb:ProjectId>{6D1A6A7B-57F8-4D06-8395-51C0362C0B8A}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_2e79ef5ec40c40659c4b5fed897ff42b.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="MT_SalesOrders.sql"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="WarningMail.sql"/>
		<msb:File Include="MasterPresentationCompletion.sql"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Breakpoint Include="9dd7d2470e6b43e6a676851e407467d2">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>113</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2e79ef5ec40c40659c4b5fed897ff42b.Properties.Settings.get_Default():ST_2e79ef5ec40c40659c4b5fed897ff42b.Properties.Sett" +
    "ings")]

namespace ST_2e79ef5ec40c40659c4b5fed897ff42b.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_2e79ef5ec40c40659c4b5fed897ff42b")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_2e79ef5ec40c40659c4b5fed897ff42b")]
[assembly: AssemblyCopyright("Copyright @  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2e79ef5ec40c40659c4b5fed897ff42b.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2e79ef5ec40c40659c4b5fed897ff42b.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2e79ef5ec40c40659c4b5fed897ff42b.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_2e79ef5ec40c40659c4b5fed897ff42b.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_2e79ef5ec40c40659c4b5fed897ff42b.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_2e79ef5ec40c40659c4b5fed897ff42b.dll">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
AAQqIgIDfTMAAAQqHgIoDgAACioeAns0AAAEKiICA300AAAEKh4CezUAAAQqIgIDfTUAAAQqHgJ7
NgAABCoiAgN9NgAABCoeAns3AAAEKiICA303AAAEKh4CezgAAAQqIgIDfTgAAAQqHgJ7OQAABCoi
AgN9OQAABCoeAns6AAAEKiICA306AAAEKh4CezsAAAQqIgIDfTsAAAQqHgJ7PAAABCoiAgN9PAAA
BCoeAns9AAAEKiICA309AAAEKh4Cez4AAAQqIgIDfT4AAAQqHgJ7PwAABCoiAgN9PwAABCoeAigO
AAAKKk4Ce0AAAAQDb3IAAAYDb1MAAAoqHgIoDgAACioAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0
ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJl
c291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEA
AAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAIwYAAAjfgAA+BgAAOQcAAAjU3RyaW5ncwAAAADc
NQAATAUAACNVUwAoOwAAEAAAACNHVUlEAAAAODsAAJgDAAAjQmxvYgAAAAAAAAACAAABVx2iCQkD
AAAA+iUzABYAAAEAAABDAAAADAAAAEAAAACMAAAARAAAAFMAAAACAAAAtwAAAAoAAAAJAAAAOwAA
AHQAAAABAAAAAQAAAAUAAAABAAAAAQAAAAAACgABAAAAAAAGABkBEgEKADUBIAEOAJUBbAEGALEB
EgEGAMcBtgEGAPgB4wEGABgDEgESAMUDuQMSAPYD5AMGAAwT8RIGAKUV8RIGADAWFhYGAFsWSRYG
AHIWSRYGAI8WSRYGAK4WSRYGAMcWSRYGAOAWSRYGAPsWSRYGABYXSRYGAC8XSRYGAGgXSBcGAIgX
SBcGALkXphcGANYXEgEGANsXEgEGAP8XSRYKACsYFRgKAEQYFRgGAFkYSBcOAHsYbAEOAJ0YbAEW
APYY1hgWABIZ1hgGAEIZEgESAGMZUBkSAHUZ5AMSAIIZUBkGAJoZEgEGAKAZEgEWALQZ1hgWAMwZ
1hgGAPAZ5hkGAPUZ5hkGAAAa5hkGAAka5hkGABQa5hkGAB4a5hkGACsa5hkGAEMaEgEGAFka5hkS
AIka5AMSAK0auQMSAL4auQMSANkauQMGABEb/hoSADcbuQMKAEYb5hkGAFsbEgEGAIAbEgEGAMIb
sRsSAM8bUBkGAAIcEgEGABQcEgEGABocEgEGADIcEgEGAHcc4wEAAAAAAQAAAAAAAQABAAAAEAAy
ADwABQABAAEAAAEQAGsAPAAJAAMABQABABAAdAB/AA0ABAAIAAMBAACjAAAAEQANACUAAQAQALEA
fwAFABAAJQABABAAwAB/AAUAFAAuAAEAEADIAH8ABQAXADUAAQAQANcAfwAFABsAPgABABAA3wB/
AAUAKABZAAEAEADyAH8ABQA0AHIAAQAQAP0AfwAFAEAAiwARANcBEwARAAQCFwARAE4COQAGAM8D
ZAABAL8EiAABAOAEiAABAAIFiwABAB8FiAABAEYFjgABAGIFiwABAIQFiwABAKUFiwAGBkUGiwBW
gE0GnwBWgFUGnwABALkGiAABAM8GiAABAOYGiAABAP8GiAABAKMHwQABALsHiAABAN8HxAABAH0I
wQABAJcIwQABALIIwQABAMgIwQABAPcKiAABABYLiAABADgLiAABAGALiAABAIQLiAABAJkLiAAB
ALILiAABANMLiAABAO0LiAABAA4MiAABADMMiAABAFkMiAABAHgMiAABADQPiAABAFEPiAABAHYP
iwABAJkPiwABAMEPjgABAOkPjgABAA8QiAABAC0QwQABAEcQwQABAGEQiAABAIIQ5wABAKIQ6wAB
AF0TiAABAHYTiAABAJgTiAABALQTiAABAOITiAABAAgUiAABACMUiAABAEsUiAABAGsUiAABAIsU
iAABAKgUHwEBAMIUJwEBALIVQQFQIAAAAACDGBQCGwABAFggAAAAAJMIGgIfAAEAkSAAAAAAkwgu
AiQAAQCYIAAAAACTCDoCKQABAKAgAAAAAJYIXgI9AAIAsyAAAAAAhhgUAhsAAgCnIAAAAACRGHQY
dwECALsgAAAAAIYIcgJHAAIAwyAAAAAAhgiGAksAAgDMIAAAAACGCJoCRwADANQgAAAAAIYIrwJL
AAMA3SAAAAAAhgjEAlAABADlIAAAAACGCNQCVAAEAO4gAAAAAIYI5AJHAAUA9iAAAAAAhgj+AksA
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
AAABAN8VAAABAOcVAAABAOcVAAABAO4VAAABAPcVAAABAAMWAAABAAsWAAABAMUVAAABAMUVAAAB
AMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUV
AAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAAB
AMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUV
AAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAAB
AMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABAMUVAAABABAWYQAUAksA
aQAUAksAcQAUAksAeQAUAksAgQAUAksAiQAUAksAkQAUAksAmQAUAksAoQAUAksAqQAUAksAsQAU
AlQAuQAUAhsAwQAUAhsACQAUAhsAyQDtF1AByQAIGFcBKQAUAlwB4QAUAmgB8QAUAhsAEQAUAhsA
+QAUAhsAGQCvGHsBAQECGYEBCQEkGYcBEQEtGUcAGQFJGY4BSQAUAksAIQFwGRsAKQEUApUBMQGM
GZwBQQGsGRsAAQG+GaABSQEkGaYBUQHVGZwBGQHfGa0BWQFwGbQBgQEUAsQBOQAyGssBCQA6GkcA
kQFNGkcAmQFkGksAAQFuGlQAGQFJGewBWQF9GvIBKQGZGvcBQQCnGhsAQQC5Gv0BQQDQGgQCuQH0
GlAAuQEdGwoCwQErG5wByQE/GxAC0QEUAksAyQEkGRUC2QFjGxoC2QFuGyACwQF3GyUC4QEUAhsA
OQCYG1AAMQGhG1AA6QHJG0IC8QHcGyUCGQHfGWkC2QHoG28CWQHwG24AiQH3G3wC+QFkGoACOQAK
HHwCAQI6GkcACQI6GoMA4QEUAksAOQAhHJ4COQAnHMsBEQI/HKQCEQJWHKsCOQA6GoMAGQFpHLUC
GQFxHIgAGQIUAksAGQKCHEcAQQAUAksAGQAUAhsADACYHNgCCAA4AKMACAA8AKgAKQCTAG4BLgBD
AFEDLgBjAHcDLgA7AFcDLgBbAG4DLgAbAFEDLgAzACgDLgATACgDLgALAOACLgAjAFEDLgArAFED
QwBrAKgASQCTAG4BYQCbAKgAgwCrAKgAoQCbAKgAwQCbAKgA4QCbAKgAAAGbAKgAAQGbAKgAIAGb
AKgAIQGbAKgAQAGbAKgAQQGbAKgAYAGbAKgAYQGbAKgAgAGbAKgAgQGbAKgAoAGbAKgAwAGbAKgA
4AGbAKgAAAKbAKgAAQKbAKgAIAKbAKgAIQKbAKgAQAKbAKgAQQKbAKgAYAKbAKgAYQKbAKgAgAKb
AKgAgQKbAKgAoAKbAKgAoQKbAKgAwAKbAKgAwQKbAKgA4AKbAKgA4QKbAKgAAQObAKgAIQObAKgA
QQObAKgAYQObAKgAgQObAKgAoQObAKgAwQObAKgA4QObAKgAAQSbAKgAIQSbAKgAQQSbAKgAYQSb
AKgAgQSbAKgAoASbAKgAoQSbAKgAwASbAKgAwQSbAKgA4ASbAKgA4QSbAKgAAAWbAKgAAQWbAKgA
IAWbAKgAIQWbAKgAQAWbAKgAQQWbAKgAYAWbAKgAYQWbAKgAgAWbAKgAgQWbAKgAoQWbAKgAwAWb
AKgAwQWbAKgA4AWbAKgA4QWbAKgAAAabAKgAAQabAKgAIAabAKgAIQabAKgAQAabAKgAQQabAKgA
YAabAKgAYQabAKgAgQabAKgAoAabAKgAoQabAKgAwAabAKgAwQabAKgA4AabAKgA4QabAKgAAAeb
AKgAAQebAKgAIAebAKgAIQebAKgAQAebAKgAQQebAKgAYAebAKgAYQebAKgAgAebAKgAgQebAKgA
oQebAKgAwAebAKgAwQebAKgA4AebAKgA4QebAKgAAAibAKgAIAibAKgAQAibAKgAYAibAKgAgAib
AKgAoAibAKgAwAibAKgA4AibAKgAAAmbAKgAIAmbAKgAQAmbAKgAYAmbAKgAgAmbAKgAoAmbAKgA
wAmbAKgA4AmbAKgAAAqbAKgAIAqbAKgAQAqbAKgAYAqbAKgAgAqbAKgAoAqbAKgAwAqbAKgA4Aqb
AKgAIAubAKgAQAubAKgAYAubAKgAgAubAKgAoAubAKgAwAubAKgA4AubAKgAAAybAKgAIAybAKgA
QAybAKgAYAybAKgAgAybAKgAoAybAKgAwAybAKgA4AybAKgAAA2bAKgAIA2bAKgAQA2bAKgAYA2b
AKgAgA2bAKgAoA2bAKgAwA2bAKgA4A2bAKgAAA6bAKgAQA6bAKgAYA6bAKgAgA6bAKgAoA6bAKgA
wA6bAKgA4A6bAKgAAA+bAKgAIA+bAKgAQA+bAKgAYA+bAKgAgA+bAKgAoA+bAKgAwA+bAKgA4A+b
AKgAABCbAKgAIBCbAKgAQBCbAKgAYBCbAKgAgBCbAKgAoBCbAKgAwBCbAKgA4BCbAKgAABGbAKgA
IBGbAKgAYwHQASkCRwJ0AoYCkAK7AsYCygICAAEAAwADAAQABAAGAAwABwAQAAgAEwAJABcACgAk
AAsAMAAAAMcBLwAAAEYCNAAAAGoCQgAAAMYFkgAAANYFkgAAAOcFlgAAAPMFkgAAAAkGmgAAABQG
lgAAACUGlgAAADUGlgAAABsHkgAAACAHkgAAACYHkgAAAC4HkgAAAP8HyAAAAAYIkgAAALEAzAAA
AOMIyAAAAOwIyAAAAPYIyAAAAPsIyAAAAJkMkgAAAKcMkgAAALgMkgAAAM8MkgAAAOIMkgAAAOYM
kgAAAO4MkgAAAP4MkgAAAAcNkgAAABcNkgAAACsNkgAAAEANkgAAAE4NkgAAALsQkgAAAMcQkgAA
ANsQlgAAAO0QlgAAAAQRmgAAABsRmgAAADARkgAAAD0RyAAAAEYRyAAAAE8RkgAAAMgA7wAAANcA
9AAAAOcUkgAAAO8UkgAAAAAVkgAAAAsVkgAAACgVkgAAAD0VkgAAAEcVkgAAAF4VkgAAAG0VkgAA
AHwVkgAAAIgVLwEAAJEVOAECAAIAAwACAAMABQABAAQABQACAAUABwABAAkACQACAAgACQACAAoA
CwABAAsACwACAAwADQABAA0ADQACAA4ADwABAA8ADwACABAAEQABABEAEQABABMAEwACABIAEwAC
ABQAFQABABUAFQABABcAFwACABYAFwACACUAGQABACYAGQACACcAGwABACgAGwACACkAHQABACoA
HQABACwAHwACACsAHwABAC8AIQACAC4AIQACADAAIwABADEAIwABADMAJQACADIAJQACADUAJwAB
ADYAJwACADcAKQABADgAKQACADkAKwABADoAKwABADwALQACADsALQACAD4ALwABAD8ALwACAEAA
MQABAEEAMQACAEIAMwABAEMAMwACAEQANQABAEUANQACAEYANwABAEcANwACAEgAOQABAEkAOQAC
AEoAOwABAEsAOwABAE0APQACAEwAPQABAE8APwACAE4APwACAFAAQQABAFEAQQABAFMAQwACAFIA
QwACAFQARQABAFUARQACAFYARwABAFcARwACAFkASQABAFoASQABAFwASwACAFsASwACAF0ATQAB
AF4ATQACAF8ATwABAGAATwACAGEAUQABAGIAUQACAGMAUwABAGQAUwACAGUAVQABAGYAVQACAGcA
VwABAGgAVwACAGkAWQABAGoAWQACAGsAWwABAGwAWwABAG4AXQACAG0AXQACAG8AXwABAHAAXwAB
AHMAYQACAHIAYQACAHQAYwABAHUAYwACAHYAZQABAHcAZQACAHgAZwABAHkAZwABAHsAaQACAHoA
aQACAHwAawABAH0AawACAH4AbQABAH8AbQACAIAAbwABAIEAbwACAIIAcQABAIMAcQACAIQAcwAB
AIUAcwACAIYAdQABAIcAdQACAIgAdwABAIkAdwDQAgSAAAABAAAAfRq7XgAAAAAAAH8AAAAEAAAA
AAAAAAAAAAABAAkBAAAAAAQAAAAAAAAAAAAAAAEAEgEAAAAADAAAAAAAAAAAAAAACgBNAQAAAAAE
AAAAAAAAAAAAAAABALkDAAAAAAwAAAAAAAAAAAAAAAoAtxgAAAAAAAAAAAEAAAChHAAABQAEAAAA
ADxNb2R1bGU+AFNUXzJlNzllZjVlYzQwYzQwNjU5YzRiNWZlZDg5N2ZmNDJiLmRsbABSZXNvdXJj
ZXMAU1RfMmU3OWVmNWVjNDBjNDA2NTljNGI1ZmVkODk3ZmY0MmIuUHJvcGVydGllcwBTZXR0aW5n
cwBTY3JpcHRNYWluAFNUXzJlNzllZjVlYzQwYzQwNjU5YzRiNWZlZDg5N2ZmNDJiAFNjcmlwdFJl
c3VsdHMAQmlsbGluZ0FkZHJlc3MAUGF5bWVudABSZXNvdXJjZUFtb3VudABQcm9kdWN0AFNhbGVz
T3JkZXJSZXNvdXJjZQBTYWxlc09yZGVyAFNhbGVzT3JkZXJzAG1zY29ybGliAFN5c3RlbQBPYmpl
Y3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0
LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlw
dFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNlcwBS
ZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUlu
Zm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUA
c2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABn
ZXRfdmFyRGJDb25uZWN0aW9uAHNldF92YXJEYkNvbm5lY3Rpb24AZ2V0X3ZhckRhdGFEaXJlY3Rv
cnkAc2V0X3ZhckRhdGFEaXJlY3RvcnkAZ2V0X3ZhckRheXNCYWNrAHNldF92YXJEYXlzQmFjawBn
ZXRfdmFyU2FsZXNPcmRlckpzb25GaWxlAHNldF92YXJTYWxlc09yZGVySnNvbkZpbGUARGF0ZVRp
bWUAZ2V0X3ZhckVuZERhdGUAc2V0X3ZhckVuZERhdGUAZ2V0X3Zhck1heEl0ZXJOdW1iZXIAc2V0
X3Zhck1heEl0ZXJOdW1iZXIAZ2V0X3ZhclNsZWVwVGltZU1pbgBzZXRfdmFyU2xlZXBUaW1lTWlu
AGdldF92YXJNb2R1bGVUb0NhbGwAc2V0X3Zhck1vZHVsZVRvQ2FsbABTeXN0ZW0uRGF0YQBEYXRh
VGFibGUAZHRNdFNhbGVzT3JkZXJzAE1haW4AU3lzdGVtLkRhdGEuT2xlRGIAT2xlRGJDb25uZWN0
aW9uAEZldGNoU2FsZXNPcmRlcnNEYXRhAFdhaXQ0TWFzdGVyUHJlc2VudGFpb24ASW5pdABJc0Zp
bGVSZWFkeQBMb2dNZXNzYWdlAEFtb3VudEZvcm1hdABSZWdpc3RyYXRpb25QZXJpb2RGb3JtYXQA
RGF0ZVRpbWVGb3JtYXQATVQyR0RfT3JkZXJUeXBlAENvdW50cnkyQ3VycmVuY3lJU09Db2RlAFNl
cmlhbGl6ZURhdGFUb0pTT04APHZhckRiQ29ubmVjdGlvbj5rX19CYWNraW5nRmllbGQAPHZhckRh
dGFEaXJlY3Rvcnk+a19fQmFja2luZ0ZpZWxkADx2YXJEYXlzQmFjaz5rX19CYWNraW5nRmllbGQA
PHZhclNhbGVzT3JkZXJKc29uRmlsZT5rX19CYWNraW5nRmllbGQAPHZhckVuZERhdGU+a19fQmFj
a2luZ0ZpZWxkADx2YXJNYXhJdGVyTnVtYmVyPmtfX0JhY2tpbmdGaWVsZAA8dmFyU2xlZXBUaW1l
TWluPmtfX0JhY2tpbmdGaWVsZAA8dmFyTW9kdWxlVG9DYWxsPmtfX0JhY2tpbmdGaWVsZAB2YXJE
YkNvbm5lY3Rpb24AdmFyRGF0YURpcmVjdG9yeQB2YXJEYXlzQmFjawB2YXJTYWxlc09yZGVySnNv
bkZpbGUAdmFyRW5kRGF0ZQB2YXJNYXhJdGVyTnVtYmVyAHZhclNsZWVwVGltZU1pbgB2YXJNb2R1
bGVUb0NhbGwAdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAZ2V0X0NpdHkAc2V0X0NpdHkAZ2V0X1N0
YXRlAHNldF9TdGF0ZQBnZXRfQ291bnRyeQBzZXRfQ291bnRyeQBnZXRfUG9zdGFsQ29kZQBzZXRf
UG9zdGFsQ29kZQA8Q2l0eT5rX19CYWNraW5nRmllbGQAPFN0YXRlPmtfX0JhY2tpbmdGaWVsZAA8
Q291bnRyeT5rX19CYWNraW5nRmllbGQAPFBvc3RhbENvZGU+a19fQmFja2luZ0ZpZWxkAENpdHkA
U3RhdGUAQ291bnRyeQBQb3N0YWxDb2RlAGdldF9BbW91bnQAc2V0X0Ftb3VudABnZXRfTWVyY2hh
bnRBY2NvdW50S2V5AHNldF9NZXJjaGFudEFjY291bnRLZXkAZ2V0X0JpbGxpbmdBZGRyZXNzAHNl
dF9CaWxsaW5nQWRkcmVzcwA8QW1vdW50PmtfX0JhY2tpbmdGaWVsZAA8TWVyY2hhbnRBY2NvdW50
S2V5PmtfX0JhY2tpbmdGaWVsZAA8QmlsbGluZ0FkZHJlc3M+a19fQmFja2luZ0ZpZWxkAEFtb3Vu
dABNZXJjaGFudEFjY291bnRLZXkAZ2V0X0lDQU5ORmVlAHNldF9JQ0FOTkZlZQBnZXRfTGlzdFBy
aWNlAHNldF9MaXN0UHJpY2UAZ2V0X0Nvc3QAc2V0X0Nvc3QAZ2V0X1ByaWNlUGFpZABzZXRfUHJp
Y2VQYWlkADxJQ0FOTkZlZT5rX19CYWNraW5nRmllbGQAPExpc3RQcmljZT5rX19CYWNraW5nRmll
bGQAPENvc3Q+a19fQmFja2luZ0ZpZWxkADxQcmljZVBhaWQ+a19fQmFja2luZ0ZpZWxkAElDQU5O
RmVlAExpc3RQcmljZQBDb3N0AFByaWNlUGFpZABnZXRfUHJvZHVjdEZhbWlseQBzZXRfUHJvZHVj
dEZhbWlseQBnZXRfUHJvZHVjdFN1YkZhbWlseQBzZXRfUHJvZHVjdFN1YkZhbWlseQBnZXRfUmVn
aXN0cmF0aW9uUGVyaW9kVHlwZQBzZXRfUmVnaXN0cmF0aW9uUGVyaW9kVHlwZQBnZXRfUmVnaXN0
cmF0aW9uUGVyaW9kAHNldF9SZWdpc3RyYXRpb25QZXJpb2QAZ2V0X1RMRABzZXRfVExEAGdldF9T
cG9uc29yAHNldF9TcG9uc29yAGdldF9SZWdpc3RyeVNwb25zb3IAc2V0X1JlZ2lzdHJ5U3BvbnNv
cgBnZXRfU3VwcGxpZXIAc2V0X1N1cHBsaWVyAGdldF9Qcm9kdWN0VExEUGhhc2UAc2V0X1Byb2R1
Y3RUTERQaGFzZQBnZXRfUmVnaXN0cnlEZXNjcmlwdGlvbgBzZXRfUmVnaXN0cnlEZXNjcmlwdGlv
bgBnZXRfUHJpY2VUaWVyRGVzY3JpcHRpb24Ac2V0X1ByaWNlVGllckRlc2NyaXB0aW9uAGdldF9Q
cmljZVRpZXJOYW1lAHNldF9QcmljZVRpZXJOYW1lAGdldF9QcmVtaXVtVGllclR5cGUAc2V0X1By
ZW1pdW1UaWVyVHlwZQA8UHJvZHVjdEZhbWlseT5rX19CYWNraW5nRmllbGQAPFByb2R1Y3RTdWJG
YW1pbHk+a19fQmFja2luZ0ZpZWxkADxSZWdpc3RyYXRpb25QZXJpb2RUeXBlPmtfX0JhY2tpbmdG
aWVsZAA8UmVnaXN0cmF0aW9uUGVyaW9kPmtfX0JhY2tpbmdGaWVsZAA8VExEPmtfX0JhY2tpbmdG
aWVsZAA8U3BvbnNvcj5rX19CYWNraW5nRmllbGQAPFJlZ2lzdHJ5U3BvbnNvcj5rX19CYWNraW5n
RmllbGQAPFN1cHBsaWVyPmtfX0JhY2tpbmdGaWVsZAA8UHJvZHVjdFRMRFBoYXNlPmtfX0JhY2tp
bmdGaWVsZAA8UmVnaXN0cnlEZXNjcmlwdGlvbj5rX19CYWNraW5nRmllbGQAPFByaWNlVGllckRl
c2NyaXB0aW9uPmtfX0JhY2tpbmdGaWVsZAA8UHJpY2VUaWVyTmFtZT5rX19CYWNraW5nRmllbGQA
PFByZW1pdW1UaWVyVHlwZT5rX19CYWNraW5nRmllbGQAUHJvZHVjdEZhbWlseQBQcm9kdWN0U3Vi
RmFtaWx5AFJlZ2lzdHJhdGlvblBlcmlvZFR5cGUAUmVnaXN0cmF0aW9uUGVyaW9kAFRMRABTcG9u
c29yAFJlZ2lzdHJ5U3BvbnNvcgBTdXBwbGllcgBQcm9kdWN0VExEUGhhc2UAUmVnaXN0cnlEZXNj
cmlwdGlvbgBQcmljZVRpZXJEZXNjcmlwdGlvbgBQcmljZVRpZXJOYW1lAFByZW1pdW1UaWVyVHlw
ZQBnZXRfT3JkZXJJdGVtSWQAc2V0X09yZGVySXRlbUlkAGdldF9PcmRlckl0ZW1SZXNvdXJjZUlk
AHNldF9PcmRlckl0ZW1SZXNvdXJjZUlkAGdldF9PcmRlckl0ZW1RdWFudGl0eQBzZXRfT3JkZXJJ
dGVtUXVhbnRpdHkAZ2V0X09yZGVySXRlbVJlc291cmNlQ291bnQAc2V0X09yZGVySXRlbVJlc291
cmNlQ291bnQAZ2V0X1NlcnZpY2VQZXJpb2RTdGFydERhdGUAc2V0X1NlcnZpY2VQZXJpb2RTdGFy
dERhdGUAZ2V0X1NlcnZpY2VQZXJpb2RFbmREYXRlAHNldF9TZXJ2aWNlUGVyaW9kRW5kRGF0ZQBn
ZXRfRHVyYXRpb25UeXBlAHNldF9EdXJhdGlvblR5cGUAZ2V0X0R1cmF0aW9uAHNldF9EdXJhdGlv
bgBnZXRfVGF4VG90YWwAc2V0X1RheFRvdGFsAGdldF9JU09DdXJyZW5jeUNvZGUAc2V0X0lTT0N1
cnJlbmN5Q29kZQBnZXRfUmVzb3VyY2VBbW91bnQAc2V0X1Jlc291cmNlQW1vdW50AGdldF9Qcm9k
dWN0AHNldF9Qcm9kdWN0ADxPcmRlckl0ZW1JZD5rX19CYWNraW5nRmllbGQAPE9yZGVySXRlbVJl
c291cmNlSWQ+a19fQmFja2luZ0ZpZWxkADxPcmRlckl0ZW1RdWFudGl0eT5rX19CYWNraW5nRmll
bGQAPE9yZGVySXRlbVJlc291cmNlQ291bnQ+a19fQmFja2luZ0ZpZWxkADxTZXJ2aWNlUGVyaW9k
U3RhcnREYXRlPmtfX0JhY2tpbmdGaWVsZAA8U2VydmljZVBlcmlvZEVuZERhdGU+a19fQmFja2lu
Z0ZpZWxkADxEdXJhdGlvblR5cGU+a19fQmFja2luZ0ZpZWxkADxEdXJhdGlvbj5rX19CYWNraW5n
RmllbGQAPFRheFRvdGFsPmtfX0JhY2tpbmdGaWVsZAA8SVNPQ3VycmVuY3lDb2RlPmtfX0JhY2tp
bmdGaWVsZAA8UmVzb3VyY2VBbW91bnQ+a19fQmFja2luZ0ZpZWxkADxQcm9kdWN0PmtfX0JhY2tp
bmdGaWVsZABPcmRlckl0ZW1JZABPcmRlckl0ZW1SZXNvdXJjZUlkAE9yZGVySXRlbVF1YW50aXR5
AE9yZGVySXRlbVJlc291cmNlQ291bnQAU2VydmljZVBlcmlvZFN0YXJ0RGF0ZQBTZXJ2aWNlUGVy
aW9kRW5kRGF0ZQBEdXJhdGlvblR5cGUARHVyYXRpb24AVGF4VG90YWwASVNPQ3VycmVuY3lDb2Rl
AGdldF9PcmRlcklkAHNldF9PcmRlcklkAGdldF9PcmRlclVUQ0RhdGVUaW1lAHNldF9PcmRlclVU
Q0RhdGVUaW1lAGdldF9DdXN0b21lcklkAHNldF9DdXN0b21lcklkAGdldF9UcmFuc2FjdGlvbmFs
SVNPQ3VycmVuY3lDb2RlAHNldF9UcmFuc2FjdGlvbmFsSVNPQ3VycmVuY3lDb2RlAGdldF9Pcmln
aW5hbE9yZGVySWRWYWx1ZQBzZXRfT3JpZ2luYWxPcmRlcklkVmFsdWUAZ2V0X09yZGVyVHlwZQBz
ZXRfT3JkZXJUeXBlAGdldF9TaGlwcGluZ0hhbmRsaW5nQW1vdW50AHNldF9TaGlwcGluZ0hhbmRs
aW5nQW1vdW50AGdldF9Ub3RhbFRheEFtb3VudABzZXRfVG90YWxUYXhBbW91bnQAZ2V0X1N1YlRv
dGFsQW1vdW50AHNldF9TdWJUb3RhbEFtb3VudABnZXRfVG90YWxBbW91bnQAc2V0X1RvdGFsQW1v
dW50AFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAExpc3RgMQBnZXRfUGF5bWVudHMAc2V0X1Bh
eW1lbnRzAGdldF9TYWxlc09yZGVyUmVzb3VyY2VzAHNldF9TYWxlc09yZGVyUmVzb3VyY2VzADxP
cmRlcklkPmtfX0JhY2tpbmdGaWVsZAA8T3JkZXJVVENEYXRlVGltZT5rX19CYWNraW5nRmllbGQA
PEN1c3RvbWVySWQ+a19fQmFja2luZ0ZpZWxkADxUcmFuc2FjdGlvbmFsSVNPQ3VycmVuY3lDb2Rl
PmtfX0JhY2tpbmdGaWVsZAA8T3JpZ2luYWxPcmRlcklkVmFsdWU+a19fQmFja2luZ0ZpZWxkADxP
cmRlclR5cGU+a19fQmFja2luZ0ZpZWxkADxTaGlwcGluZ0hhbmRsaW5nQW1vdW50PmtfX0JhY2tp
bmdGaWVsZAA8VG90YWxUYXhBbW91bnQ+a19fQmFja2luZ0ZpZWxkADxTdWJUb3RhbEFtb3VudD5r
X19CYWNraW5nRmllbGQAPFRvdGFsQW1vdW50PmtfX0JhY2tpbmdGaWVsZAA8UGF5bWVudHM+a19f
QmFja2luZ0ZpZWxkADxTYWxlc09yZGVyUmVzb3VyY2VzPmtfX0JhY2tpbmdGaWVsZABPcmRlcklk
AE9yZGVyVVRDRGF0ZVRpbWUAQ3VzdG9tZXJJZABUcmFuc2FjdGlvbmFsSVNPQ3VycmVuY3lDb2Rl
AE9yaWdpbmFsT3JkZXJJZFZhbHVlAE9yZGVyVHlwZQBTaGlwcGluZ0hhbmRsaW5nQW1vdW50AFRv
dGFsVGF4QW1vdW50AFN1YlRvdGFsQW1vdW50AFRvdGFsQW1vdW50AFBheW1lbnRzAFNhbGVzT3Jk
ZXJSZXNvdXJjZXMARGljdGlvbmFyeWAyAGRpY3RTYWxlc09yZGVyAEFkZAB2YWx1ZQBvYmpSbUNv
bm4Ac0ZpbGVuYW1lAG1lc3NhZ2UAbnVtYmVyAGRhdGVUaW1lAG10T3JkZXJDb2RlAGNvdW5ydHkA
ZGF0YQBvcmRlcgBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1ld29ya0F0dHJp
YnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5RGVz
Y3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5
Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmln
aHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJlQXR0
cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNl
cnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxp
dHlBdHRyaWJ1dGUAU3lzdGVtLkRpYWdub3N0aWNzAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1
dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBBc3NlbWJseQBnZXRf
QXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBF
ZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU1NJ
U1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAFNjcmlwdE9iamVjdE1vZGVsAGdldF9EdHMA
TWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1
bnRpbWUAQ29ubmVjdGlvbnMAZ2V0X0Nvbm5lY3Rpb25zAENvbm5lY3Rpb25NYW5hZ2VyAGdldF9J
dGVtAGdldF9Db25uZWN0aW9uU3RyaW5nAFN0cmluZwBDb25jYXQAU3lzdGVtLkRhdGEuQ29tbW9u
AERiQ29ubmVjdGlvbgBPcGVuAE9sZURiQ29tbWFuZABEYkNvbW1hbmQARXhlY3V0ZVNjYWxhcgBJ
bnQzMgBJRGlzcG9zYWJsZQBEaXNwb3NlAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxl
AGdldF9WYWx1ZQBGb3JtYXQAU3lzdGVtLklPAEZpbGUARmlsZVN0cmVhbQBGaWxlTW9kZQBGaWxl
QWNjZXNzAEZpbGVTaGFyZQBTdHJlYW1Xcml0ZXIAU3RyZWFtAGdldF9Ob3cAVG9TdHJpbmcARXhj
ZXB0aW9uAGdldF9NZXNzYWdlAFRleHRXcml0ZXIAV3JpdGVMaW5lAHNldF9UYXNrUmVzdWx0AFJl
YWRBbGxUZXh0AE9sZURiRGF0YVJlYWRlcgBFeGVjdXRlUmVhZGVyAENsZWFyAElEYXRhUmVhZGVy
AExvYWQARGF0YVJvd0NvbGxlY3Rpb24AZ2V0X1Jvd3MASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJh
c2UAZ2V0X0NvdW50AFN5c3RlbS5Db2xsZWN0aW9ucwBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9y
AGdldF9DdXJyZW50AERhdGFSb3cASXNOdWxsAEludmFsaWREYXRhRXhjZXB0aW9uAENvbnZlcnQA
VG9EYXRlVGltZQBUb0RvdWJsZQBNb3ZlTmV4dABOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbgBnZXRf
SG91cgBFeGVjdXRlTm9uUXVlcnkAU3lzdGVtLlRocmVhZGluZwBUaHJlYWQAU2xlZXAARGJEYXRh
UmVhZGVyAGdldF9IYXNSb3dzAFRvSW50MzIARXhpc3RzAGdldF9MZW5ndGgAQ29uc29sZQBnZXRf
VGlja3MASW50NjQARG91YmxlAFBhcnNlAGdldF9VdGNOb3cAVGltZVpvbmVJbmZvAEZpbmRTeXN0
ZW1UaW1lWm9uZUJ5SWQAQ29udmVydFRpbWVGcm9tVXRjAFJlcGxhY2UARW1wdHkAUmVnaW9uSW5m
bwBnZXRfSVNPQ3VycmVuY3lTeW1ib2wAc2V0X0l0ZW0AU1RfMmU3OWVmNWVjNDBjNDA2NTljNGI1
ZmVkODk3ZmY0MmIuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAABxUwBUAF8AMgBlADcA
OQBlAGYANQBlAGMANAAwAGMANAAwADYANQA5AGMANABiADUAZgBlAGQAOAA5ADcAZgBmADQAMgBi
AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAfYQBcADcAQgAnAGYA
VABSAFgAUQB+AHIAZQAvAHkAAQs7AHAAdwBkAD0AABFTAEUATABFAEMAVAAgADEAABV7ADAAfQB7
ADEAfQAuAGwAbwBnAAAlQwA6AFwASABEAEYAUwBfAFMAdABhAGcAZQBcAGwAbwBnAFwAACdTAHkA
cwB0AGUAbQA6ADoAUABhAGMAawBhAGcAZQBOAGEAbQBlAAAtRQB4AGMAZQBwAHQAaQBvAG4AOgAg
AFsAewAwAH0AXQAsAFsAewAxAH0AXQAAEUMAOgBcAHQAZQBtAHAAXAAAJU0AVABfAFMAYQBsAGUA
cwBPAHIAZABlAHIAcwAuAHMAcQBsAAAPbwByAGQAZQByAGkAZAAAE3MAdABhAHIAdABkAGEAdABl
AAAVQwB1AHMAdABvAG0AZQByAEkAZAAAD2MAbwB1AG4AdAByAHkAAClPAHIAaQBnAGkAbgBhAGwA
TwByAGQAZQByAEkAZABWAGEAbAB1AGUAAAUtADEAAQsyADIAMgAyADIAABdvAHIAZABlAHIAdAB5
AHAAZQBpAGQAAAt0AG8AdABhAGwAAAd0AGEAeAAAI2wAbwBjAGEAbABoAG8AcwB0AC4ASABvAHMA
dABPAHAAcwAAP00AYQBzAHQAZQByAFAAcgBlAHMAZQBuAHQAYQB0AGkAbwBuAEUAcgByAG8AcgBN
AGEAaQBsAC4AcwBxAGwAAENNAGEAcwB0AGUAcgBQAHIAZQBzAGUAbgB0AGEAdABpAG8AbgBXAGEA
cgBuAGkAbgBnAE0AYQBpAGwALgBzAHEAbAAAB3sAMAB9AAAfdgBhAHIARABiAEMAbwBuAG4AZQBj
AHQAaQBvAG4AACF2AGEAcgBEAGEAdABhAEQAaQByAGUAYwB0AG8AcgB5AAAXdgBhAHIARABhAHkA
cwBCAGEAYwBrAAAndgBhAHIARgBlAGUAZABiAGEAYwBrAEoAcwBvAG4ARgBpAGwAZQAAFXYAYQBy
AEUAbgBkAEQAYQB0AGUAACF2AGEAcgBNAGEAeABJAHQAZQByAE4AdQBtAGIAZQByAAAfdgBhAHIA
UwBsAGUAZQBwAFQAaQBtAGUATQBpAG4AAB92AGEAcgBNAG8AZAB1AGwAZQBUAG8AQwBhAGwAbAAA
N3sAMAB9AGAARABXAF8AUAByAG8AbQBvAHQAZQByADoAOgBJAG4AaQB0AGAAWwB7ADEAfQBdAAAf
SQBzAEYAaQBsAGUAUgBlAGEAZAB5ADoAewAwAH0AAEdDADoAXABIAEQARgBTAF8AUwB0AGEAZwBl
AFwAbABvAGcAXABFAFMATwBNAF8ARABhAHQAYQBQAHIAbwBjAC4AbABvAGcAABEwAC4AMAAwADAA
MAAwADAAADFSAGUAZwBpAHMAdAByAGEAdABpAG8AbgBQAGUAcgBpAG8AZABGAG8AcgBtAGEAdAAA
FTIAMAAxADgALQAwADEALQAyADUAAStQAGEAYwBpAGYAaQBjACAAUwB0AGEAbgBkAGEAcgBkACAA
VABpAG0AZQAACXsAMAB9AFoAACd5AHkAeQB5AC0ATQBNAC0AZABkACAASABIADoAbQBtADoAcwBz
AAEbbQB0AFMAYQBsAGUAcwBPAHIAZABlAHIAcwAAADwXC670f9JCs8//w06cjvEACLd6XFYZNOCJ
CImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUEAAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwE
CAASDAMgAA4EIAEBDgMgAAgEIAEBCAQgABEdBSABAREdAwYSIQUgAQESJQQAAQIOBAABAQ4EIAEO
DQUgAQ4RHQQgAQ4OAgYOAgYIAwYRHQMoAA4DKAAIBCgAER0DBhEUBAAAAAAEAQAAAAMgAA0EIAEB
DQQgABIYBSABARIYAgYNAwYSGAMoAA0EKAASGAQgABIgBSABARIgBCAAEiQFIAEBEiQDBhIgAwYS
JAQoABIgBCgAEiQIIAAVEikBEhwJIAEBFRIpARIcCCAAFRIpARIoCSABARUSKQESKAcGFRIpARIc
BwYVEikBEigIKAAVEikBEhwIKAAVEikBEigIBhUSLQIOEiwFIAEBEiwGAAESZRFpBCAAEm0GIAIB
DhJtBAcBEhUFIAEBEXUIAQACAAAAAAADAAABBSAAEoCBBSAAEoCFBiABEoCJHAYAAw4ODg4GIAIB
DhIlAyAAHAUgABKApQYgARKAqRwGAAMODhwcDwAEEoCxDhGAtRGAuRGAvQYgAQESgMUEAAARHRsH
DBKAiQ4CDhIlEoCVEoDJDhKAsRKAwRIlER0FAAIODg4EAAEODgUgABKA0QYgAQESgNUFIAASgNkF
IAASgOEEIAECDgQgARwOBQABER0cBAABDRwDIAACGAcKDg4OEoCVEoDREjASgOUSLBKA4RKAoQQA
AQEIIQcRDg4OEoCVAhKAiRIlEoCVDg4SgJUODhKAlRIlER0RHQUAAg4OHAQAAQgOBwcCEoDJER0D
IAAKBQACAQ4cCQcDEoCxEoDJAg0HBg4OEoCxEoDBER0KBQABER0OBgABEoEJDgkAAhEdER0SgQkF
IAIOAwMKBwQRHRKBCREdDgMHAQ4FBwESgQ0HFRItAg4SLAcgAgETABMBRwEAGi5ORVRGcmFtZXdv
cmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0
KAEAI1NUXzJlNzllZjVlYzQwYzQwNjU5YzRiNWZlZDg5N2ZmNDJiAAAFAQAAAAAWAQARQ29weXJp
Z2h0IEAgIDIwMTcAAAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEAAPhs
AAAAAAAAAAAAAA5tAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbQAAAAAAAAAAX0NvckRsbE1h
aW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEA
AQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYgAAAsAMAAAAAAAAAAAAAsAM0AAAAVgBT
AF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABALtefRoAAAEAu159Gj8A
AAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAA
ACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBBADAAABAFMAdAByAGkAbgBnAEYA
aQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAwADAAMAA0AGIAMAAAAHAAJAABAEYAaQBsAGUARABl
AHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwAyAGUANwA5AGUAZgA1AGUAYwA0ADAAYwA0ADAA
NgA1ADkAYwA0AGIANQBmAGUAZAA4ADkANwBmAGYANAAyAGIAAABAAA8AAQBGAGkAbABlAFYAZQBy
AHMAaQBvAG4AAAAAADEALgAwAC4ANgA3ADgAMQAuADIANAAyADUAMQAAAAAAcAAoAAEASQBuAHQA
ZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAyAGUANwA5AGUAZgA1AGUAYwA0ADAAYwA0ADAANgA1
ADkAYwA0AGIANQBmAGUAZAA4ADkANwBmAGYANAAyAGIALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEA
bABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEANwAA
AHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwAyAGUANwA5AGUA
ZgA1AGUAYwA0ADAAYwA0ADAANgA1ADkAYwA0AGIANQBmAGUAZAA4ADkANwBmAGYANAAyAGIALgBk
AGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMgBlADcAOQBlAGYA
NQBlAGMANAAwAGMANAAwADYANQA5AGMANABiADUAZgBlAGQAOAA5ADcAZgBmADQAMgBiAAAARAAP
AAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADcAOAAxAC4AMgA0ADIA
NQAxAAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2
ADcAOAAxAC4AMgA0ADIANQAxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAYAAADAAAACA9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAA==</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="113"
            Column="13" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="201,42"
          Id="Package\Script Task - Sales Orders"
          TopLeft="182,91" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>